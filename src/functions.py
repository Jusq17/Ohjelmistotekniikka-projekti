
import random

sudoku_grid = [[0,0,0,0,0,0,0,0,0], 
                    [0,0,0,0,0,0,0,0,0], 
                    [0,0,0,0,0,0,0,0,0], 
                    [0,0,0,0,0,0,0,0,0], 
                    [0,0,0,0,0,0,0,0,0], 
                    [0,0,0,0,0,0,0,0,0], 
                    [0,0,0,0,0,0,0,0,0], 
                    [0,0,0,0,0,0,0,0,0], 
                    [0,0,0,0,0,0,0,0,0]]

rows = [[(0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8)],
        [(1,0), (1,1), (1,2), (1,3), (1,4), (1,5), (1,6), (1,7), (1,8)],
        [(2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (2,7), (2,8)],
        [(3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (3,7), (3,8)],
        [(4,0), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6), (4,7), (4,8)],
        [(5,0), (5,1), (5,2), (5,3), (5,4), (5,5), (5,6), (5,7), (5,8)],
        [(6,0), (6,1), (6,2), (6,3), (6,4), (6,5), (6,6), (6,7), (6,8)],
        [(7,0), (7,1), (7,2), (7,3), (7,4), (7,5), (7,6), (7,7), (7,8)],
        [(8,0), (8,1), (8,2), (8,3), (8,4), (8,5), (8,6), (8,7), (8,8)]]

cols = [[(0,0), (1,0), (2,0), (3,0), (4,0), (5,0), (6,0), (7,0), (8,0)],
        [(0,1), (1,1), (2,1), (3,1), (4,1), (5,1), (6,1), (7,1), (8,1)],
        [(0,2), (1,2), (2,2), (3,2), (4,2), (5,2), (6,2), (7,2), (8,2)],
        [(0,3), (1,3), (2,3), (3,3), (4,3), (5,3), (6,3), (7,3), (8,3)],
        [(0,4), (1,4), (2,4), (3,4), (4,4), (5,4), (6,4), (7,4), (8,4)],
        [(0,4), (1,5), (2,5), (3,5), (4,5), (5,5), (6,5), (7,5), (8,5)],
        [(0,6), (1,6), (2,6), (3,6), (4,6), (5,6), (6,6), (7,6), (8,6)],
        [(0,7), (1,7), (2,7), (3,7), (4,7), (5,7), (6,7), (7,7), (8,7)],
        [(0,8), (1,8), (2,8), (3,8), (4,8), (5,8), (6,8), (7,8), (8,8)]]

squares = [[(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2)], 
            [(0,3), (0,4), (0,5), (1,3), (1,4), (1,5), (2,3), (2,4), (2,5)],
            [(0,6), (0,7), (0,8), (1,6), (1,7), (1,8), (2,6), (2,7), (2,8)],
            [(3,0), (3,1), (3,2), (4,0), (4,1), (4,2), (5,0), (5,1), (5,2)], 
            [(3,3), (3,4), (3,5), (4,3), (4,4), (4,5), (5,3), (5,4), (5,5)],
            [(3,6), (3,7), (3,8), (4,6), (4,7), (4,8), (5,6), (5,7), (5,8)],
            [(6,0), (6,1), (6,2), (7,0), (7,1), (7,2), (8,0), (8,1), (8,2)], 
            [(6,3), (6,4), (6,5), (7,3), (7,4), (7,5), (8,3), (8,4), (8,5)],
            [(6,6), (6,7), (6,8), (7,6), (7,7), (7,8), (8,6), (8,7), (8,8)]]


def possible(n,p):

    for i in rows:

        if p in i:

            for j in i:

                if sudoku_grid[j[0]][j[1]] == n:

                    return False

    for i in cols:

        if p in i:

            for j in i:

                if sudoku_grid[j[0]][j[1]] == n:

                    return False

    for i in squares:

        if p in i:

            for j in i:

                if sudoku_grid[j[0]][j[1]] == n:

                    return False

    return True


def create_grid():

    for i in sudoku_grid:

        i.clear()

        for k in range(9):

            number1 = random.randint(0,9)
            number2 = 0

            numbers = (number1, number2)

            number = random.choice(numbers)

            i.append(number)

def solve():

    r = 0
    c = 0

    for i in sudoku_grid:

        c = 0

        for b in i:

            if b == 0 and 1 not in i:

                sudoku_grid[r][c] = 1

            c += 1

        r += 1

    print_matrix(sudoku_grid)

    return sudoku_grid

def print_matrix():

    print("Matriisi:")

    for i in sudoku_grid:

        print(i)